pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-credentials')
        AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
        DOCKER_USERNAME = credentials('docker-hub-credentials')
        DOCKER_PASSWORD = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = 'my-dotnet-app'
        UAT_SERVER = '172.31.36.58'  
        PROD_SERVER = '172.31.40.242' 
        SSH_KEY_PATH = '/path/to/your/ec2/ssh-key.pem' 
    }
    parameters {
        choice(name: 'ENV', choices: ['UAT', 'PROD'], description: 'Select the environment for deployment')
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'master', url: 'https://github.com/chaitanyateja25/dotnet-hello-world.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-hub-credentials', url: '') {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        docker.image("${DOCKER_IMAGE_NAME}:${env.BUILD_ID}").push()
                        docker.image("${DOCKER_IMAGE_NAME}:${env.BUILD_ID}").push('latest')
                    }
                }
            }
        }
        stage('Deploy to EC2') {
            steps {
                script {
                    def serverIp = (params.ENV == 'UAT') ? UAT_SERVER : PROD_SERVER
                    sshagent(['ec2-ssh-key']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} ec2-user@${serverIp} 'docker pull ${DOCKER_IMAGE_NAME}:${env.BUILD_ID} && docker stop dotnet-app || true && docker rm dotnet-app || true && docker run -d -p 80:80 --name dotnet-app ${DOCKER_IMAGE_NAME}:${env.BUILD_ID}'
                        """
                    }
                }
            }
        }
        stage('Health Check') {
            steps {
                script {
                    def serverIp = (params.ENV == 'UAT') ? UAT_SERVER : PROD_SERVER
                    sh "curl http://${serverIp}:80"
                }
            }
        }
    }
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
